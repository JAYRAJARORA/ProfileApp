<?php

namespace Jedi\UserBundle\Repository;

use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Jedi\UserBundle\Entity\User;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{
    /**
     * Allow login to be done via username or email
     *
     * @param $username
     * @return User|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneByEmailOrUsername($username)
    {
        return $this->createQueryBuilder('u')
            ->andWhere('u.username = :username OR u.email= :email')
            ->setParameter('username',$username)
            ->setParameter('email',$username)->getQuery()
            ->getOneOrNullResult();
    }





    /**
     * symfony security is sent here to check the username or email
     *
     * @param string $username
     * @return User|null|UserInterface
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function loadUserByUsername($username)
    {
        $user = $this->findOneByEmailOrUsername($username);
        return $user;
    }

    /**
     *
     * @param UserInterface $user
     * @return null|object
     */
    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf(
                'Instances of "%s" are not supported.',
                $class
            ));
        }
        if (!$refreshedUser = $this->find($user->getId())) {
            throw new UsernameNotFoundException(sprintf(
                'User with id %s not found',
                json_encode($user->getId()))
            );
        }
        return $refreshedUser;
    }
    public function supportsClass($class)
    {
        return $this->getEntityName() === $class
            || is_subclass_of($class, $this->getEntityName());
    }
}
